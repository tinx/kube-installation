---
# this would be used after main.yml to deploy an NFS shared filesystem, but we no longer need this part
# (kept for reference purposes)

- name: Download standard rook install manifests (for comparison only)
  get_url:
    url: 'https://raw.githubusercontent.com/rook/rook/release-{{ kube_payload_rook_release_train }}/cluster/examples/kubernetes/ceph/{{ item }}'
    dest: '{{ kube_payload_basedir }}/rook/{{ item }}'
    owner: '{{ kube_payload_owner }}'
    group: '{{ kube_payload_group }}'
    mode: 0644
  with_items:
    - 'filesystem.yaml'
    - 'storageclass-bucket-retain.yaml'
    - 'nfs.yaml'

- name: Write custom versions of filesystem, storageclass, nfs manifest
  template:
    src: 'unused/{{ item }}_yaml.j2'
    dest: '{{ kube_payload_basedir }}/rook/{{ item }}.yaml'
    owner: '{{ kube_payload_owner }}'
    group: '{{ kube_payload_group }}'
    mode: 0644
  with_items:
    - 'filesystem_custom'
    - 'storageclass_custom'
    - 'nfs_custom'

- name: Apply rook filesystem manifest
  include_role:
    name: kube-kubectl-apply
  vars:
    kube_kubectl_apply_dir: '{{ kube_payload_basedir }}/rook'
    kube_kubectl_apply_yaml: filesystem_custom.yaml

- name: Wait for 2 metadata server (mds) pods to be created
  shell: "/usr/local/bin/kubectl get pod --namespace=rook-ceph --selector='app=rook-ceph-mds' --output=jsonpath='{range .items[*]}{.metadata.labels.app}{\"\\n\"}{end}' | wc -l | grep 2"
  register: rook_controller_pods_created
  failed_when: rook_controller_pods_created.rc == 2
  until: rook_controller_pods_created.rc == 0
  run_once: true
  retries: 10
  delay: 30
  changed_when: false

- name: Wait for all mds pods to become ready
  shell: "/usr/local/bin/kubectl wait --namespace=rook-ceph --for=condition=Ready pods --selector='app=rook-ceph-mds' --timeout=600s"
  register: rook_controller_pods_ready
  run_once: true
  changed_when: false

- name: Apply rook storage class manifest for StorageClass rook-cephfs (not namespaced)
  include_role:
    name: kube-kubectl-apply
  vars:
    kube_kubectl_apply_dir: '{{ kube_payload_basedir }}/rook'
    kube_kubectl_apply_yaml: storageclass_custom.yaml

- name: Deploy NFS server
  include_role:
    name: kube-kubectl-apply
  vars:
    kube_kubectl_apply_dir: '{{ kube_payload_basedir }}/rook'
    kube_kubectl_apply_yaml: nfs_custom.yaml

- name: Wait for 2 nfs pods to be created
  shell: "/usr/local/bin/kubectl get pod --namespace=rook-ceph --selector='app=rook-ceph-nfs' --output=jsonpath='{range .items[*]}{.metadata.labels.app}{\"\\n\"}{end}' | wc -l | grep 2"
  register: rook_controller_pods_created
  failed_when: rook_controller_pods_created.rc == 2
  until: rook_controller_pods_created.rc == 0
  run_once: true
  retries: 10
  delay: 30
  changed_when: false

- name: Wait for all nfs pods to become ready
  shell: "/usr/local/bin/kubectl wait --namespace=rook-ceph --for=condition=Ready pods --selector='app=rook-ceph-nfs' --timeout=600s"
  register: rook_controller_pods_ready
  run_once: true
  changed_when: false
