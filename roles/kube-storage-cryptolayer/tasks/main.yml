---
- name: Create a raw partition spanning the whole disk
  parted:
    device: '{{ kube_storage_local_raw_device }}'
    number: 1
    state: present
    label: gpt
    name: LUKS
    flags: [ raid ]

- name: Install cryptsetup
  package:
    name: cryptsetup
    state: present

- name: Render mount script
  template:
    src: setup-cryptolayer.sh.j2
    dest: /root/setup-cryptolayer.sh
    owner: root
    group: root
    mode: 0700

- name: Check if already a luks volume
  shell: 'cryptsetup isLuks {{ kube_storage_local_raw_device }}1'
  ignore_errors: yes
  register: wasLuksVolume
  failed_when: false
  changed_when: false

- name: Check if luksOpen has already been run, so the mapper device exists
  shell: 'ls /dev/mapper/{{ kube_storage_local_crypted_devicename }}'
  register: wasLuksOpen
  failed_when: false
  changed_when: false

# if either of the two tests failed, use the rendered script to create and/or open the crypto volume
- name: Run cryptsetup luksFormat unless already a luks volume, or mount if just not mounted
  become: false
  local_action:
    module: shell
    cmd: 'ssh {{ ansible_ssh_common_args }} ansible@{{ ansible_hostname }} "sudo /root/setup-cryptolayer.sh"'
    stdin: '{{ kube_storage_passphrase }}'
    stdin_add_newline: no
  register: cryptSetupOutput
  when: (wasLuksVolume.rc != 0) or (wasLuksOpen.rc != 0)

# - debug: var=cryptSetupOutput

- name: Verify that device is now a valid luks volume
  shell: 'cryptsetup isLuks {{ kube_storage_local_raw_device }}1'
  changed_when: false

- name: Verify that luksOpen has now been run, so the mapper device exists
  shell: 'ls /dev/mapper/{{ kube_storage_local_crypted_devicename }}'
  changed_when: false

- name: Install lvm2
  package:
    name: lvm2
    state: present

# if we have newly created the luks volume above, we now need to partition it using LVM

- name: Initialize "physical" volume for use by LVM
  shell: 'pvcreate /dev/mapper/{{ kube_storage_local_crypted_devicename }}'
  when: wasLuksVolume.rc != 0

- name: Create volume group for our local storage
  shell: 'vgcreate vg_storage /dev/mapper/{{ kube_storage_local_crypted_devicename }}'
  when: wasLuksVolume.rc != 0

- name: Create 2T lv for the ceph pool
  shell: 'lvcreate -L 2048G vg_storage -n ceph'
  when: wasLuksVolume.rc != 0

- name: Create lv for remaining space (for local docker storage)
  shell: 'lvcreate -l 100%FREE vg_storage -n local'
  when: wasLuksVolume.rc != 0

