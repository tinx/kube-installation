To Do:

 - disable network manager completely BEFORE writing DNS config on nodes
   https://www.thegeekdiary.com/centos-rhel-7-how-to-disable-networkmanager/

 - wait until metallb is up before continuing to deploy argocd (needs service type lb)

 - deploy ceph/rook into k8s using argocd

   https://www.linux-magazin.de/ausgaben/2019/12/rook-2/5/
   # git clone https://github.com/rook/rook.git
   # cd rook/cluster/examples/kubernetes/ceph
   # kubectl create -f operator.yaml
   # kubectl get pods -n rook-ceph-system
   # kubectl create -f cluster.yaml

 - document update/recovery paths in README
    - update k8s version using kubespray
    - reinstall a k8s node using kubespray
    - reinstall os on a node w/o deleting storage
    - reinstall a node with deleting storage (w/o losing data)
    - reboot a node and use make storage to re-mount (w/o losing data)

 - check if kubespray now supports centos8 and update everything (currently experimental as of 2020-10-03)
 - network tester

   yum install iperf iperf3
   apt-get install iperf iperf3

    https://bitsanddragons.wordpress.com/2018/03/13/speed-test-with-iperf-on-centos-7/

 - External DNS https://github.com/kubernetes-sigs/external-dns
   + DnsMasq configured to accept RFC2136
   DNS per MetalLB with fixed IP 192.168.0.201 that forwards to .8 except for k8s services
   (Router can be configured to announce this DNS per dhcp)

 - configure, deploy and check netchecker on our installation?
   https://github.com/kubernetes-sigs/kubespray/blob/master/docs/netcheck.md
 - kubespray somehow removes our nameserver on rubix from /etc/resolv.conf
   fix this (right now, running make kubes again also fixes it)
 - kubespray doesn't work if firewalld is running (dns pod cannot reach api server)
   find configuration setting to make it co-exist?
 - pip3 install requirements.txt runs every time on rubix - fix this? can we run a check against an expected state?
 - add reboot + wait after package changes
    - public network only available after reboot, so probably add a reboot handler
      to trigger a reboot if public network is not up at the end of the make kubes run
 - configure repos for nodes to use rubix as a repo source
   - avoid installing internet surprise updates
   - don't forget to adjust kickstart file
 - if we install postfix, we may need to change its /etc/postfix/main.cf to say
  inet_interfaces = 127.0.0.1
  instead of
  #inet_interfaces = localhost
  to allow it to start.

 - always reboot after configuring network on rubix

 - notify about reboot after updates

 - use rubix's name instead of ip for update mirroring

 - after setting up the mirror, update yum cache

 - run ntpdate during ansible run
 - set hwclock
 - set timezone local, hwclock utc

 - monitoring
    - how long ago did the centos7 mirror script last run
    - are there new packages

 - move var defaults into defaults/main.yml from code in roles

 - disk setup plan:
    1. crypt
    2. lvm
    # 3. Ceph OSD
    # 4. CephFS

 - kube auto-update needs to be orchestrated
    - evacuate pods
    - disable Ceph node (mark osds as "out")
    - update
    - potentially reboot (but how to get the passphrase?)
    - enable Ceph node (mark osds as "in")
    - ensure Ceph is healthy + synchronized
    - health check for kubernetes

 - orchestrated re-install for multiple kubes

 - generate /etc/hosts on all nodes, for times when rubix is down
 - templatify hosts.yaml.j2 to read node IPs and names from config
 - mirror a secretless argocd git repo on rubix's apache
   + roll out needed secrets via ansible
